---
- set_fact: do_token="{{ lookup('env', 'DO_API_TOKEN')}}"

- set_fact: ssh_key_name="{{ lookup('env', 'SSH_KEY_NAME')}}"

- name: ensure ssh key exists and get the key id
  digital_ocean:
    state: present
    command: ssh
    name: '{{ ssh_key_name }}'
  register: my_ssh_key

- name: create droplets for mongo instances
  digital_ocean:
    state: present
    command: droplet
    name: '{{ item.name }}'
    size_id: 512mb
    unique_name: yes
    ssh_key_ids: '{{ my_ssh_key.ssh_key.id }}'
    region_id: fra1
    image_id: ubuntu-18-04-x64
    api_token: '{{ do_token }}'
  register: mongoDroplets
  loop: '{{ mongoInstances }}'

- name: create droplet for app instance
  digital_ocean:
        state: present
        command: droplet
        name: '{{ appInstance }}'
        unique_name: yes
        size_id: 512mb
        ssh_key_ids: '{{ my_ssh_key.ssh_key.id }}'
        region_id: fra1
        image_id: ubuntu-18-04-x64
        api_token: '{{ do_token }}'
  register: appDroplet

- name: create droplet for mediator instance
  digital_ocean:
        state: present
        command: droplet
        name: '{{ mediatorInstance }}'
        unique_name: yes
        size_id: 512mb
        ssh_key_ids: '{{ my_ssh_key.ssh_key.id }}'
        region_id: fra1
        image_id: ubuntu-18-04-x64
        api_token: '{{ do_token }}'
  register: mediatorDroplet

- name: create a droplet for the server that runs the test
  digital_ocean:
        state: present
        command: droplet
        name: '{{ testingInstance }}'
        unique_name: yes
        size_id: 512mb
        ssh_key_ids: '{{ my_ssh_key.ssh_key.id }}'
        region_id: fra1
        image_id: ubuntu-18-04-x64
        api_token: '{{ do_token }}'
  register: perfomanceTest

- name: clean the inventory folder - check if new hosts file exixts and delete it
  file:
    state: absent
    path: ../inventory/new/hosts

- name: create a new host file
  lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: '[db]'

- name: write ip addressses of the db servers
  lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: '{{ item.droplet.ip_address }} ansible_user=root do_name={{ item.droplet.name }}'
  loop: '{{ mongoDroplets.results }}'

- lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: "\n[app]"

- name: write ip addresss of the app instance
  lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: '{{ appDroplet.droplet.ip_address }} ansible_user=root do_name={{ appDroplet.droplet.name }}'

- lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: "\n[mediator]"

- name: write ip addresss of the mediator instance
  lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: '{{ mediatorDroplet.droplet.ip_address }} ansible_user=root do_name={{ mediatorDroplet.droplet.name }}'

- lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: "\n[perf]"

- name: write ip addresss of the test server
  lineinfile:
    path: ../inventory/new/hosts
    create: yes
    line: '{{ perfomanceTest.droplet.ip_address }} ansible_user=root do_name={{ perfomanceTest.droplet.name }}'

- name: change the ansible config to point to the new hosts file in inventory/new
  replace:
    path: ../ansible.cfg
    regexp: 'old'
    replace: 'new'
